{
  "holes": [
    {
      "expression": "(S (N Alice))",
      "notes": "undefined"
    },
    {
      "expression": "(S (NP (Det a) (N woman)) (V arrived)))",
      "notes": "undefined"
    },
    {
      "expression": "(S (N John) (VP (V saw) (N Alice)))",
      "notes": "undefined"
    },
    {
      "expression": "(S (NP (Det a) (N man)) (VP (V saw) (N Alice)))",
      "notes": "undefined"
    },
    {
      "expression": "(S (N John) (VP (V saw) (NP (Det a) (N woman))) ",
      "notes": "undefined"
    },
    {
      "expression": "(S (N John) (VP (V likes) (N sweets)))",
      "notes": "undefined"
    },
    {
      "expression": "(S (N John) (VP (V likes) (NP (det those) (N sweets)))",
      "notes": "undefined"
    },
    {
      "expression": "(S (N Alice) (VP (V gave) (N John) (N sweets)))",
      "notes": "undefined"
    },
    {
      "expression": "(S (NP (Det a) (N woman)) (VP (V gave) (NP (Det a) (N man)) (NP (det those) (N sweets)))",
      "notes": "undefined"
    }
  ],
  "description": "The trees that you will derive for these sentences may seem natural. But they violate the basic principle that two expressions that can be freely substituted for each other are of the same category. Why?"
}

(CP 
        (NP who ^1) 
        (C' 
            (C did) 
            (S 
                (NP Lucy) 
                (VP 
                    (V think) 
(CP
        (NP who ^t1)
        (C' 
            (C that) 
            (S 
                (NP Max) 
                (VP
                    (V saw) 
                    (NP who ^t1)))))))))

(CP 
        (NP who ^1) 
        (C' 
            (C did) 
            (S 
                (NP Lucy) 
                (VP 
                    (V think) 
(CP
        (NP who ^2^t1)
        (C' 
            (C that) 
            (S 
                (NP Max) 
                (VP
                    (V saw) 
                    (NP who ^t2)))))))))

(S (NP (N student)) (aux -past) (VP (V was) (P here)))
(N (V (& re) (V create)) (& ion))
(S (NP Mary) (Aux (T will) (Perf have)) (VP (V go) (Af ne#en)))

(CP 
        (NP who ^1) 
            (S 
                    (V think) 
        (NP who ^2^t1)
        (C' 
                    (V saw) 
                    (NP who ^t2))))

(CP 
        (NP who ^1) 
            (S 
                    (V think) 
        (NP who ^2)
        (C' 
                    (V saw) 
                    (NP who ^t2))
        (C' 
                    (V watch))
        (C' 
                    (V see)
                    (NP who ^t1))))


(CP 
        (NP who ^1) 
            (S 
                    (V think) 
                    (NP who ^t1)
                    (C' (V saw))
                    (C' (V see))))
(CP 
        (NP who ^1) 
            (S 
                    (V think) 
                    (NP who ^2^t1)
                    (C' 
                            (V saw) 
                            (NP who ^t2))
                    (C' (V is))))
(CP 
        (NP who ^1) 
            (S 
                    (V think) 
                    (NP who ^2^t1)
                    (C' 
                            (V saw) 
                            (NP who ^3^t2))
                    (C' (S
                            (V see) 
                            (NP who ^t3)))
                    (C' (VP (V is)))))